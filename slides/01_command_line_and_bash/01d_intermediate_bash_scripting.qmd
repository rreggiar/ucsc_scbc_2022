---
title: "01d: Intermediate Bash Scripting"
author: "Roman E. Reggiardo, Vikas Peddu"
date: "`r format(Sys.time(), '%d %B, %Y')`"
format: 
  revealjs:
    chalkboard: true
    smooth-scroll: true
editor: visual
---

```{r include=FALSE}
# need a dummy R chunk to get Bash chunks to work 
library(knitr) 
opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
```

## Scenario: Taking your molecular diagnostics to the next level

The lab needs you to process patient sequencing data to try and identify mutations in our **final gene panel**

-   we will need to use an external, specialized, bioinformatics tool to do this

## Installing tools

"*If you've thought of it, someone has probably done it, and if not, you should do it right now*" -- My brain

-   Complex but repeatable and general tasks often will attract developers who can and do program tools to **do** whatever it is

-   In this case, we need a **Variant Caller**

    -   A tool that can check sequenced RNA or DNA for significant differences in identity

## Our tool of choice: *freeBayes*

Check out freeBayes [here](https://github.com/freebayes/freebayes)

> [*freebayes*](http://arxiv.org/abs/1207.3907) is a [Bayesian](http://en.wikipedia.org/wiki/Bayesian_inference) genetic variant detector designed to find small polymorphisms, specifically SNPs (single-nucleotide polymorphisms), indels (insertions and deletions), MNPs (multi-nucleotide polymorphisms), and complex events (composite insertion and substitution events) smaller than the length of a short-read sequencing alignment.

## Installing ***freeBayes***

Their [GitHub](https://github.com/freebayes/freebayes) also has **binaries** available that we can execute in [releases](https://github.com/freebayes/freebayes/releases)

-   We need to download the [following](https://github.com/freebayes/freebayes/releases) `.gz` file

-   We've worked with `.gz` before, what do we do next?

```{bash, eval=F, echo=T}
#| code-fold: true
gunzip *.gz
```

## Running the code:

With an unzipped, executable ***freeBayes*** binary

```{bash, error=T, echo=T}
# ignore the path, this is on my mac
/usr/local/bin/freebayes
```

## But how do you use it?

complex software like this has A LOT of instructions:

```{bash, error=T, echo=T}
# ignore the path, this is on my mac
/usr/local/bin/freebayes --help
```

## Let's focus: what we need

-   `-r --region <chrom>:<start_position>-<end_position>`

-   `-b --bam FILE   Add FILE to the set of BAM files to be analyzed.`

-   <div>

    > -f \--fasta-reference FILE
    >
    > Use FILE as the reference sequence for analysis.
    >
    > An index file (FILE.fai) will be created if none exists.
    >
    > If neither \--targets nor \--region are specified, FreeBayes
    >
    > will analyze every position in this reference.

    </div>

## How do we get the data

-   `-b BAM files` The lab (me) has provided you with bam files are in `/media/fileshare/samples*.tar.gz`

-   `-f FASTA` The human genome reference is available at `/media/fileshare/hg38.fa.gz`

-   `-r regions` will be provided by you (we've already extracted them....)

copy the human genome to a directory named `reference` and the extract the `.bam` file archive, deleting the original `.tar.gz`

```{bash, echo=T, eval=F}
tar -zxvf sample_2.tar.gz
```

## Some special steps:

We need to proceed carefully:

-   `ls` your directory

-   `gunzip` the reference fasta file:

    -   `gunzip <fasta>` -what did this do? (`ls` the directory again)

## Job #4: Variant Calling

Write a **bash script** `call_variant.sh` that:

1.  Takes a command line argument to indicate which gene to look for mutations in
2.  Utilizes `final_gene_panel.fa` to extract the relevant `chr`, `start`, and `stop`
3.  Runs `freebayes`,using the reference fasta, on the sample `.bam` files using the range extracted from `final_gene_panel.fa`
4.  Redirects the `freebayes` output to an informatively named output file\
