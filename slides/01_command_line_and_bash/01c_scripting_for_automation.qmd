---
title: "01c: Scripting for Automation"
author: "Roman E. Reggiardo, Vikas Peddu"
date: "`r format(Sys.time(), '%d %B, %Y')`"
format: 
  revealjs:
    chalkboard: true
    smooth-scroll: true
editor: visual
---

```{r include=FALSE}
# need a dummy R chunk to get Bash chunks to work 
library(knitr) 
opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
```

```{bash, include=FALSE, eval=TRUE}
chmod -x ../../code/first_script.sh
```

## Scenario: Automating molecular diagnosis

Yep, you're still a **Bioinformatician** working for a molecular diagnostics lab

-   The only thing is, you need to start thinking about doing these kind of analyses again and again and again and again ......

-   The lab says they might send 100's if not 1000's of samples through your approach

## Prediction:

What's a script?

## Job #3: Automate your approaches in a Bash script

But first.....what's a **script**?

## Kinda like a tool but you make it yourself

Really, its any assembly of code to accomplish a task or multiple tasks.

-   When you combine a bunch of tools that already exist, you might call it a `pipeline`

-   Similar to the `pipe |` we just learned about, this means outputs flowing into inputs for the next set of commands

## From command-line to command...code?

A bash **script** exists in a type of **text file**

-   they have special extensions: `.sh`

-   and need to be `executable` (more on this in a minute)

### navigate into your `/media/fileshare/` directory

and copy `first_script.sh` to `BSCC_2023_dir/code/`

## So, what do we do with new files?

Take a look! Remember, `#` means the following is a comment

```{bash, echo=T}
cat ../../code/first_script.sh
```

## What do we do with scripts?

Execute them!

```{bash, echo=T, error=T}
cd ../../code
./first_script.sh
```

uh oh...permission denied? this is our computer!!

-   We need to change the permissions on the file to allow `execution`

## Quick aside: permissions for execution

Files are protected from being used incorrectly by `permissions`

we can view permissions with

```{bash, echo=T}
ls -l ../../code
```

## Viewing permissions

```{bash, echo=T}
ls -l ../../code
```

three main types of permission are available:

1.  `r` - read
2.  `w` - write
3.  `x` - execute

what types of permission does `first_script.sh` have?

## Let's just add some execution permissions and move on...

To make a file `executable`

```{bash, echo=T}
# chmod -- change file modes, +x adds exec to file
# chmod [mode change] [input file]
chmod +x ../../code/first_script.sh
```

now, what does this look like?

```{bash, echo=T}
ls -l ../../code
```

notice the added `x`'s

## Reflection:

How could we use permission to modify the role and use of files we create and use?

## Exploring `first_script.sh` and reviewing commands

Take a look at the first four lines, the **shebang** and **boilerplate**

```{bash, eval=T, echo=T}
#| code-fold: true
head -4 ../../code/first_script.sh
```

The **shebang**, tells the computer we're using **bash** and where to find it to run the script -- try `which bash` in cmd line

```{bash, echo=F}
head -1 ../../code/first_script.sh
```

-   The rest is just useful information

## Exploring `first_script.sh`: variable assignment

```{bash, eval=T, echo=T}
#| code-fold: true
grep '=' ../../code/first_script.sh
```

Assigning **variables** is just `variable` = `value`

**Try**: Run the code block above

Run `echo $script_name` on the command line, what do you get?

## Exploring `first_script.sh`: operations

```{bash, eval=T, echo=T}
#| code-fold: true
tail -7 ../../code/first_script.sh
```

Three `echo` commands, each using either a variable or a command along with text

## Prediction:

Where could `echo` with text and variables be useful going forward?

## Exploring `first_script.sh`: using cmd line tools

```{bash, eval=T, echo=T}
#| code-fold: true
tail -2 ../../code/first_script.sh
```

Sometimes we'll need to explicitly mark the tool for execution use `$()` , otherwise we'll just print `ls` here

## Practice 10:

On the **command line**, run each `echo` line from `first_script.sh`, what do you get?

```{bash}
grep 'echo' ../../code/first_script.sh | grep -v '^#'
```

why do some work and others don't?

## Practice 10 output:

1\.

```{bash}
echo "The name of this script is:" $script_name
```

2\.

```{bash}
echo "Your user ID is:" $input_userID
```

3\.

```{bash}
cd ../../code
echo "Your present working directory is:" $PWD
```

4\.

```{bash}
cd ../../code
echo "The contents of $PWD are:" $(ls)
```

## Reflection:

Why do you think the script is structured like this:

1.  Shebang
2.  Variable assignment
3.  Operations

?

## Prediction:

Since we can't see the output of commands in a script like we can at the command line, how can we test our work to make sure its doing what we expect?

## Remember...Job #3! (pt. 1)

#### Automate your gene and patient extraction in a Bash script

1.  create a bash script: `process_lab_data.sh` , open it in `text editor`
    1.  make it `executable`
2.  within `process_lab_data.sh`
    1.  write shebang/boilerplate code in the first lines

    2.  make a `gene_db` variable that stores the **path** to your `gene_panel_database.fa`

    3.  make a `patient_db` variable that stores the **path** to your `patient_database/` **directory**

## Job #3 (pt.2)

Test your code by introducing `echo` commands that:

1.  print the paths to your data
2.  print the contents of the `patient_database` directory

#### Output:

```{bash}
bash ../../code/process_lab_data.sh
```

## Job #3 (pt.3)

1.  Introduce the **commands** that generate `final_gene_panel.fa` by operating on the variable you've set to `gene_panel_database.fa`

    ```{bash}
    cat ../../data/final_gene_panel.csv
    ```

2.  Introduce the **commands** that generate `patient_data.csv` by operating on the variable you've set to `patient_database/` (output is just `head -3`)

    ```{bash}
    cat ../../data/patient_data.csv | head -3
    ```

## Reflection:

Compare my `first_script.sh` to your `process_lab_data.sh` -- what's different?

## Job #3 (pt.4)

1.  Add comments to your code to explain what you're doing on each line
2.  Add `echo` commands to report to the user which step the code is on

## Prediction:

What's something else our tool might able to use that command line tools already use?

## Defining script variables at the cmd line

Bash scripts have special values that correspond to **positions** on the command line:

`$0` `$1` `$2` `$3` ....

that let us implement command line **arguments**

-   to see more, copy `second_script.sh` from `/media/fileshare/`

## Checking out `second_script.sh`

```{bash, echo=T}
cd ../../code
tail -16 second_script.sh # for some reason only this many lines fit
```

## Running `second_script.sh`

*remember to make `second_script.sh` executable*

```{bash, echo=T}
../../code/second_script.sh
```

```{bash, echo=T}
../../code/second_script.sh 640 TRUE
```

```{bash, echo=T}
../../code/second_script.sh 1200 FALSE
```

-   what does each command line argument appear to do?

## Breaking down `second_script.sh`

The top bit looks **the same** except for minor details

```{bash, echo=T}
#| code-fold: true
head -4 ../../code/second_script.sh
```

-   why this is sometimes called "boilerplate"

## Variables look similar but values are different

Bash scripts have special values that correspond to **positions** on the command line:

`$0` `$1` `$2` `$3` ....

```{bash, echo=T}
#| code-fold: true
head -10 ../../code/second_script.sh | tail -5
```

## `$0` is the command itself

```{bash, echo=T}
#| code-fold: true
head -10 ../../code/second_script.sh | tail -5 | head -2
```

`basename` is a tool that takes the last entry in a path

```{bash, echo=T}
cd ../../code
basename $PWD
```

## `$1` is the first positional argument

```{bash, echo=T}
#| code-fold: true
head -10 ../../code/second_script.sh | tail -3 | head -2
```

Here, \${1:-10} is being used to set a default value of 10 for the first positional value `$1`

## Practice 11:

Get `second_script.sh` to return `21436` as the output value

## `$2` is the second positional argument

```{bash, echo=T}
#| code-fold: true
head -10 ../../code/second_script.sh | tail -1
```

-   As before, we set a default arg of `TRUE` for `$2` , what happens if we change it?

## `$2` -\> `print_info` operates in an `if` statement

```{bash, echo=T}
#| code-fold: true
tail -8 ../../code/second_script.sh
```

## Another critical tool: `IF` statements

Much like `for` loops, `if` statements are multi-part commands that enable complex logic

-   if

    -   \[ condition to check for \]

        -   then (equivalent to do)

            -   do something

        -   fi (equivalent to done)

`if` statements allow us to **check** something before running

## Practice 12:

Try `if` on the command line

-   change `tmp_var` around until you can figure out what condition we are "satisfying"

```{bash, echo=TRUE}
tmp_var=7
if [ $(($tmp_var%2)) = 0 ]; then echo "satisfied"; fi
```

## Prediction:

What is missing from the current `if` statement that might be useful to adapt to different challenges?

## Job #3 (pt.5)

1.  Add two command line arguments to `process_lab_data.sh`
    1.  `proc_genes`

    2.  `proc_patients`
2.  Use these variables to enable command-line control over whether `final_gene_panel.csv` and `patient_data.csv` are generated

## Reflection:

How has writing scripts changed your view on command line and Bash programming?
