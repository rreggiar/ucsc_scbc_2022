---
title: "Introduction to the command line"
author: "Roman E. Reggiardo"
format: revealjs
editor: visual
---

```{r include=FALSE}
# need a dummy `R` chunk to get `Bash` chunks to work
```

## Prediction:

What does data look like? Where do we keep it?

## Computers and Data

The **command line** gives us an opportunity to work with computers in a more direct way compared to "Folders" and "Files".

![](images/Screen%20Shot%202022-06-28%20at%204.02.45%20PM.png){fig-align="center"}

## For example:

Look at your desktop, what's there?

Folders?

What's inside?

![](images/Screen%20Shot%202022-06-28%20at%204.25.49%20PM.png){fig-align="center"}

## This sounds like something we could see in everyday life...

![](images/file_cabinet.jpeg){fig-align="center"}

## Computers, on the other hand, think differently

Really they operate in binary, on 1's and 0's, but just beneath 'Files' and 'Folders' they operate with:

"Folders" == "Directories"

"Files" == "Paths"

![](images/Screen%20Shot%202022-06-28%20at%204.35.02%20PM.png){fig-align="center"}

## **Prediction:**

How will your experience be different when you switch from "human think" to "command line/computer think"?

## Practice 01:

### Create a "Project Folder"

Using the **Graphical User Interface (GUI)** provided on your Jupyter login, create a **Folder** called:

`SCBC_2022_folder`

![](images/Screen%20Shot%202022-06-28%20at%204.37.31%20PM.png){fig-align="center"}

## Practice 01A:

### Create sub-folders and a `README.txt` file:

`data/`

`notes/`

`code/`

![](images/Screen%20Shot%202022-06-28%20at%204.38.28%20PM.png){fig-align="right"}

## Practice 01B:

### Go back to Jupyter and edit README.txt to say something....

![your desktop doesn't have a text editor installed.....yet](images/Screen%20Shot%202022-06-28%20at%204.41.24%20PM.png){fig-align="center"}

## Reflection:

### What you've just made is a 'project folder':

Why is this useful? What could it help with moving forward?

![](images/Screen%20Shot%202022-06-28%20at%204.38.28%20PM.png){fig-align="center"}

## So why even bother with the command line? We just did so much!

We can **create, copy, rename, move (etc etc)** files using a GUI, it works, its easy and intuitive.

-   only possible if a GUI is provided

-   not **reproducible** (could someone else get the same result? yes...but in the same exact way? maybe not.)

-   **limited** to what the GUI/Operating System designers decided was useful for most users.

Bioinformatics asks us to do much more with data, and thus computers, than most.

## Beyond the GUI: Command Line interface \[CLI\]

On your desktops you can **view** and **interact** **with** the command line with a **terminal** -- a piece of software built to enable our use of command line programming

![terminal on left, file explorer on right](images/Screen%20Shot%202022-06-30%20at%2011.53.19%20AM.png){fig-align="center"}

## Prediction:

Instead of the mouse, how will we navigate the command line?

## Anatomy of the `command line`

![](images/Screen%20Shot%202022-06-30%20at%202.02.21%20PM.png){fig-align="center"}

`user` \@ `host` : `location` `$` *commands you enter here*

## Before we start: An introduction to *code chunks*

If you see something like this

```{bash echo=TRUE}
# print out 'hello' to the command line
echo 'hello'
```

its **code** (and expected output below) that you can execute in your **terminal** on the **command line**. Just copy and paste or type it in yourself, hit enter, and follow along

Lines that start with `#` and are grayed out are **comments** that don't run as code; they are just notes

## Before we start: Some basic commands

The command line accepts...commands!

These tell us *where we are* and *what's in here with*

```{bash echo=TRUE}
# present working directory
pwd
```

```{bash echo=TRUE}
# list directory contents
ls
```

## Another basic command with big implications: `cd`

Our command line "mouse" -- move *somewhere, anywhere*

```{bash echo=TRUE}
# change directory to SCBC_2022_folder
cd SCBC_2022_folder
pwd
```

hint: try hitting *tab* to complete the rest of your statements -- it'll auto-complete (like texting, etc)

## What this looks like in file explorer

![](images/Screen%20Shot%202022-06-30%20at%201.55.51%20PM.png){fig-align="center"}

## If you're going forward, you should be able to go back too

```{bash echo=TRUE}
# present working directory
pwd
```

```{bash echo=TRUE}
# change directory to SCBC_2022_folder
cd SCBC_2022_folder
pwd
```

```{bash echo=TRUE}
# change directory to SCBC_2022_folder
cd SCBC_2022_folder
# change directory to the one above/before/in front of pwd
cd .. 
pwd
```

## Briefly: The role of '.' & '..'

These are really useful shortcuts that correspond to location

```{bash echo=TRUE}
# change directory to SCBC_2022_folder
cd SCBC_2022_folder
# change directory to the one above/before/in front of pwd
cd .. 
pwd .
```

as we just saw, `cd ..` tells us to go from:

```{bash}
# change directory to SCBC_2022_folder
cd SCBC_2022_folder
pwd
```

to

```{bash}
pwd
```

## Briefly: The role of '.' & '..'

These are really useful shortcuts that correspond to location

```{bash echo=TRUE}
# change directory to SCBC_2022_folder
cd SCBC_2022_folder
# change directory to the one above/before/in front of pwd
cd .. 
pwd .
```

looking again, `pwd .` is the same as `pwd` -- `.` is equivalent to pwd, `..` is one step up

## What exactly is `pwd` telling us?

what `pwd` 'returns' is a string of text

```{bash echo=TRUE}
# present working directory
pwd
```

it is the **path** to our present working directory:

each directory along the path is separated by `/`

## Thinking in paths

When you `cd` to a different directory, it has to be in a valid path

from

```{bash}
pwd
```

we can go to

```{bash}
# change directory to SCBC_2022_folder
cd SCBC_2022_folder
pwd
```

but not to `Documents`

```{bash error=TRUE, echo=TRUE}
# should ERROR
cd Documents
```

## If you're going somewhere, you need directions

To get to the `Documents` directory from

```{bash}
pwd
```

directly, we need to provide the entire **path**

```{bash}
cd ../../../
pwd
```

looks like:

```{bash error=TRUE, echo=TRUE}
cd /Users/rreggiar/Documents
pwd
```

## Practice 02: Moving through directories

before beginning please run:

```{bash echo=TRUE}
cd
```

1.  Where are you? What does it appear running just `cd` does?
2.  What's there?
3.  Go to `Pictures/` directory, is anything in there?
4.  Go to `SCBC_2022_folder/data/` directory, what does `pwd` return?
5.  List the **three** ways you can get back to where you were in `1.`

## Reflection:

Do you like moving around with the command line? It is easier than mouse? Is it more challenging?

## Prediction:

Now we know how to move, what else have we done with the file explorer/mouse that we can do on the command line?

## More command line: Creating

Moving is great, but we can do much more

```{bash echo=TRUE}
# create a **file**
touch temp.txt
ls
```

`touch` is our command to create a **file**, not a directory

## Creating continued

We also will need to create `directories` to help organize our files

```{bash echo=TRUE}
# make a **directory**
mkdir temporary_dir
```

since its a directory, we can `cd` into it

```{bash echo=TRUE}
cd temporary_dir
pwd
cd ..
```

## Moving and Copying

If we want to organize, we need to be able to move things

```{bash echo=TRUE}
# move a **file** to a different **directory**
# mv [file you want to move] [destination you want to target]
mv temp.txt temporary_dir
ls temporary_dir
```

The file is no longer present in our `pwd`:

```{bash}
ls
```

## Moving and Copying continued

Sometimes moving isn't quite what we want, in that case we can **copy** a file and keep the original

```{bash echo=TRUE}
# copy a **file** to a different **directory**
# cp [file you want to move] [destination you want to target]
cp temporary_dir/temp.txt .
ls temporary_dir
```

The file now exists in both directories

```{bash}
pwd
ls
```

## Destroying **cannot be undone!!**

Well, we called these temporary, so let's get rid of them **carefully**

```{bash echo=TRUE}
# destroy a **file** NOT REVERSIBLE
rm temp.txt
ls
```

this doesn't destroy the copy in `temporary_dir`

```{bash echo=TRUE}
# destroy a **file** NOT REVERSIBLE
ls temporary_dir
```

## Destroying cannot be undone continued

We can also remove `directories` with `-rf` (we'll come back to this later)

```{bash echo=TRUE}
# destroy a **directory** NOT REVERSIBLE
rm -rf temporary_dir
```

now try to `cd` into our deleted `directory`

```{bash echo=TRUE, error=TRUE}
cd temporary_dir
```

this also destroys the files within

## Prediction:

For the same task, which is faster: file explorer or command line?

## Practice 03: Doing the same stuff differently

### Create a "Project Directory"

Make the directory `SCBC_2022_dir` with the same contents as `SCBC_2022_folder`.

Delete the `SCBC_2022_folder` directory.

There are multiple ways to do this, see if you can find the fastest approach.

```{bash}
mkdir SCBC_2022_dir
mkdir SCBC_2022_dir/data SCBC_2022_dir/notes SCBC_2022_dir/code
touch SCBC_2022_dir/README.txt
echo 'Hi im Roman and I like to code' > SCBC_2022_dir/README.txt
```

## Reflection:

Is it starting to seem like the command line might do some things faster/cleaner/better than the file explorer?

## Working with files

We've already experienced a minor road block in the GUI -- there's no text editor installed.

The command line can help us here, just print the whole file out in terminal:

```{bash echo = TRUE}
# 'concatenate' or **print** whole **files**
cat SCBC_2022_dir/README.txt
```

## Printing continued

`cat` works great when we have existing files with content, but what about printing in general?

```{bash echo = TRUE}
# write/print arguments 
echo 'Hello World'
```

## Printing to files: Standard Output

`echo` is not limited to sending stuff to terminal, we can also send this output to a **file**

```{bash echo=TRUE}
# `>` tells cmd line to send the output to a specific file, rather than printing to terminal
echo 'Banana slugs have no known predators' > SCBC_2022_dir/README.txt
cat SCBC_2022_dir/README.txt
```

Something new here: `>` is letting us write our `echo` output to our `SCBC_2022_dir/README.txt` **file.**

But in this case, we **over-wrote** our original statement!

## Printing to files: Thinking about writing

How can we re-generate our original `SCBC_2022_dir/README.txt` ?

## Printing to files: Thinking about writing

How can we re-generate our original `SCBC_2022_dir/README.txt` ?

```{bash echo=TRUE}
echo 'Hi im Roman and I like to code' > SCBC_2022_dir/README.txt
cat SCBC_2022_dir/README.txt
```

## Printing to files: Appending instead of over-writing

Much like `.` and `..` , `>` and `>>` have distinct functions.

```{bash echo=TRUE}
echo 'Banana slugs have no known predators' >> SCBC_2022_dir/README.txt
cat SCBC_2022_dir/README.txt
```

now we have both lines!

## Prediction:

`echo` would be a pretty laborious way to write an essay, but what real uses does it have?
